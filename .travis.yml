language: go
go:
  - "1.10.3"
# import forks to the correct location
go_import_path: github.com/VertebrateResequencing/wr

services:
  - docker

env:
  global:
    - KUBERNETES_VERSION=v1.10.0
    # Move Kubernetes config files to the appropriate place and adjust permissions.
    - CHANGE_MINIKUBE_NONE_USER=true

before_install:
  - go get github.com/modocache/gover
  - go get github.com/mattn/goveralls
  - go get github.com/Masterminds/glide
  - $HOME/gopath/bin/glide -q install

jobs:
  include:

    - stage: Tests
      script:
        - go test -tags netgo -v -coverprofile=queue.coverprofile -covermode count ./queue
        - go test -tags netgo -v -coverprofile=sched.coverprofile -covermode count ./jobqueue/scheduler
        - WR_MANAGERPORT="11301" go test -tags netgo -v -coverprofile=jq.coverprofile -covermode count ./jobqueue
        - go test -tags netgo -v -coverprofile=cloud.coverprofile -covermode count ./cloud
        - go test -tags netgo -v -coverprofile=rp.coverprofile -covermode count ./rp
        - $HOME/gopath/bin/gover
        - $HOME/gopath/bin/goveralls -coverprofile=gover.coverprofile -service travis-ci
    
    - stage: Compile for k8s e2e
      script: make compile_k8s_tmp

    - stage: E2E Tests
      script: make test-e2e
      before_script:
        # Make root rshared in order to fix kube-dns problems.
        - sudo mount --make-rshared /
        # Download kubectl, which is a requirement for using minikube and running e2e tests.
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        # Download minikube.
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        # Start minikube.
        - sudo minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=${KUBERNETES_VERSION} --feature-gates=CustomResourceSubresources=true --extra-config=apiserver.Authorization.Mode=RBAC
        # Update the kubeconfig to use the minikube cluster.
        - minikube update-context
        # Wait for Kubernetes to be up and ready.
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
        # Ensure default ServiceAccount is a cluster-admin, as a workaround required for kube-dns when running with RBAC enabled.
        - kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
        # Wait for kube-dns to become ready.
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
