---
before_install:
  - "go get github.com/modocache/gover"
  - "go get github.com/mattn/goveralls"
cache:
  directories:
    - $HOME/go/pkg/
dist: trusty
env:
  global:
    - KUBERNETES_VERSION=v1.10.0
    - CHANGE_MINIKUBE_NONE_USER=true
    - WR_MANAGERPORT="11301"
    - GO111MODULE=on
go:
  - "1.11.1"
go_import_path: github.com/VertebrateResequencing/wr
install:
  - "go mod verify"
jobs:
  include:
    -
      script:
        - "go test -tags netgo -coverprofile=queue.coverprofile -covermode count -failfast ./queue || travis_terminate 1"
        - "go test -tags netgo -coverprofile=sched.coverprofile -covermode count -failfast ./jobqueue/scheduler || travis_terminate 1"
        - "go test -tags netgo -coverprofile=jq.coverprofile -covermode count -failfast ./jobqueue || travis_terminate 1"
        - "go test -tags netgo -coverprofile=cloud.coverprofile -covermode count -failfast ./cloud || travis_terminate 1"
        - "go test -tags netgo -coverprofile=rp.coverprofile -covermode count -failfast ./rp || travis_terminate 1"
        - "$HOME/gopath/bin/gover || travis_terminate 1"
        - "$HOME/gopath/bin/goveralls -coverprofile=gover.coverprofile -service travis-ci"
      stage: Tests
    -
      before_script:
        - "sudo mount --make-rshared /"
        - "curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/"
        - "curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/v0.28.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/"
        - "sudo minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=${KUBERNETES_VERSION} --feature-gates=CustomResourceSubresources=true --extra-config=apiserver.Authorization.Mode=RBAC"
        - "minikube update-context"
        - "JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath=\"$JSONPATH\" 2>&1 | grep -q \"Ready=True\"; do sleep 1; done"
        - "kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default"
        - "JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath=\"$JSONPATH\" 2>&1 | grep -q \"Ready=True\"; do sleep 1;echo \"waiting for kube-dns to be available\"; kubectl get pods --all-namespaces; done"
        - "git clone https://github.com/jetstack/ubuntu-nsenter && docker build -t ubuntu-nsenter ubuntu-nsenter/. && docker run -v /usr/local/bin:/hostbin ubuntu-nsenter cp /nsenter /hostbin/nsenter"
      script: "make test-k8s-unit"
      stage: "Kubernetes unit & Integration tests"
    -
      before_script:
        - "sudo mount --make-rshared /"
        - "curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/"
        - "curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/v0.28.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/"
        - "sudo minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=${KUBERNETES_VERSION} --feature-gates=CustomResourceSubresources=true --extra-config=apiserver.Authorization.Mode=RBAC"
        - "minikube update-context"
        - "JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath=\"$JSONPATH\" 2>&1 | grep -q \"Ready=True\"; do sleep 1; done"
        - "kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default"
        - "JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath=\"$JSONPATH\" 2>&1 | grep -q \"Ready=True\"; do sleep 1;echo \"waiting for kube-dns to be available\"; kubectl get pods --all-namespaces; done"
        - "git clone https://github.com/jetstack/ubuntu-nsenter && docker build -t ubuntu-nsenter ubuntu-nsenter/. && docker run -v /usr/local/bin:/hostbin ubuntu-nsenter cp /nsenter /hostbin/nsenter"
      script: "make test-e2e"
      stage: "e2e Tests"
language: go
services:
  - docker
sudo: required
